import java.util.*;

//01  Given two binary strings a and b, return their sum as a binary string.

	 
class AddBinary{
  public static String addBinary(String a,String b){
    StringBuilder sb=new StringBuilder();
    int i=a.length()-1;
    int j=b.length()-1;
    int temp=0;
    while (i>=0 ||j>=0||temp>0){
      if (i>=0){
        temp=temp+a.charAt(i)-'0';
      i--;
	  }
      if(j>=0){
        temp = temp+b.charAt(j)-'0';
      j--;
	  }
      sb.append(temp%2);
      temp=temp/2;
    }
    return sb.reverse().toString();
  }
  public static void main(String[] args) {
    String a = "11";
    String b = "1";
    System.out.println(addBinary(a, b));
  }
}

 //02 Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.
   class ColumnNumber{
    public static void main(String[] args){
      String result="";
      int columnNum =1;
      while(columnNum>0) {
        columnNum--; 
      int remainder=columnNum % 26;
       result =(char)(remainder+'A')+result;
       columnNum = columnNum / 26;
      }
     System.out.println("columnNumber:"+result);
    }
}


//03  Given a string s, reverse only all the vowels in the string and return it.
class ReverseVowel{
  public static String reverseVowels(String s){
    char[] ch = s.toCharArray();
    int start = 0;
    int end =ch.length-1;
    while (start<end) {
      if (!isVowel(ch[start])){
        start++;
      } 
	  else if (!isVowel(ch[end])){
        end--;
      } 
	  else {
        char temp=ch[start];
        ch[start]=ch[end];
        ch[end]=temp;
        start++;
        end--;
      }
    }
    return new String(ch);
  }
  public static boolean isVowel(char ch) {
    return (ch =='a' || ch =='e' || ch =='i' || ch =='o' || ch =='u' || ch =='A' || ch =='E' || ch =='I' || ch =='O' || ch =='U');
  }
  public static void main(String[] args) {
    System.out.println(reverseVowels("leetcode"));
    System.out.println(reverseVowels("hello"));
  }
}

//04 You are given two strings s and t.String t is generated by random shuffling string s and then add one more letter at a random position.

class FindDifference {
  public static char FindDifference(String s, String t) {
    int[] count =new int[26];
    for (char c: s.toCharArray()) {
      count[c-'a']--;
    }
    for (char c: t.toCharArray()) {
      count[c-'a']++;
    }
    for (int i=0; i<26; i++) {
      if (count[i] ==1) {
        return (char)(i +'a');
      }
    }
    return ' ';
  }

  public static void main(String[] args) {
    String s = "abcd";
    String t = "abcde";
    System.out.println(FindDifference(s, t));

  }
}

//05 Given two strings s and t, return true if s is a subsequence of t, or false otherwise

class SequenceDelete {
	
	public static void main(String[] args) {
		String s = "abc";
		String t = "ahbgdc";
		System.out.println(subsequence(s, t));
	}
  
    public static boolean subsequence(String s, String t) {
		int i = 0;
		int j = 0;
		while (i < s.length() && j < t.length()) {
			if (s.charAt(i) == t.charAt(j)) {
				i++;
			}
		j++;
		}
    return i == s.length();
  }
}

//06 Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.
 class AddStrings {
  public static String addStrings(String num1, String num2) {
    StringBuilder sb = new StringBuilder();
    int temp = 0;
    int i = num1.length() - 1;
    int j = num2.length() - 1;

    while (i>=0||j>=0||temp>0) {
      int sum = temp;
      if (i>=0) {
        sum =sum+num1.charAt(i)-'0';
        i--;
      }
      if (j >= 0) {
        sum = sum + num2.charAt(j) - '0';
        j--;
      sb.append(sum % 10);
      }
     
      temp = sum / 10;
      
    }

    return sb.reverse().toString();
  }

  public static void main(String[] args) {
    String num1 = "11";
    String num2 = "123";
    System.out.println(addStrings(num1,num2));
  }
}
//07 Given a string s, return the number of segments in the string.A segment is defined to be a contiguous sequence of non-space characters.
class SegmentCounter {
  public static void main(String[] args) {
     String s="Hello";
    System.out.println(CountValid("Hello"));
  }
  public static int CountValid(String s) {
    int count = 0;
    boolean Valid = false;

    for (int i = 0; i < s.length(); i++) {
      if (s.charAt(i) != ' ') {
        if (!Valid) {
          count++;
          Valid = true;
        }
      } 
	  else {
        Valid = false;
      }
    }
    return count;
  }
}

//08  We define the usage of capitals in a word to be right when one of the following cases holds:
class CapitalUse {
  public static boolean detectCapitalUse(String word) {
    return allcaps(word) || allLower(word) || firstcap(word);

  }
  public static boolean allcaps(String word) {
    for (int i = 0; i < word.length(); i++) {
      if (!Character.isUpperCase(word.charAt(i))) {
        return false;
      }
    }
    return true;
  }

  public static boolean allLower(String word) {
    for (int i = 0; i < word.length(); i++) {
      char ch = word.charAt(i);
      if (!Character.isLowerCase(word.charAt(i))) {
        return false;
      }
    }
    return true;
  }
  public static boolean firstcap(String word) {
    if (word.length() == 0) return false;
    if (!Character.isUpperCase(word.charAt(0))) return false;
    for (int i = 1; i < word.length(); i++) {
      if (!Character.isLowerCase(word.charAt(i))) {
        return false;
      }
    }
    return true;
  }
  public static void main(String[] args) {
    System.out.println(detectCapitalUse("USA"));
    System.out.println(detectCapitalUse("leetcode"));
    System.out.println(detectCapitalUse("FlaG"));
  }
}